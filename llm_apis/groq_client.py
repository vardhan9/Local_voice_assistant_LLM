import os
from groq import Groq

class GroqClient:
    """Client for interacting with the Groq API for chat completions and other functionalities."""
    def __init__(self, verbose=False):
        """
        Initialize the GroqClient with the API key.
        
        Args:
            verbose (bool): Whether to print verbose output.
        """
        self.client = Groq(api_key=os.getenv('GROQ_API_KEY'))
        self.verbose = verbose

    def stream_completion(self, messages, model, **kwargs):
        """
        Get chat completions from the Groq API.

        Args:
            messages (list): List of messages used as context or prompt. Each message should be a dict with 'role' and 'content'.
            model (str): Model identifier for text generation, default is 'llama3-8b-8192'.
            **kwargs: Additional keyword arguments for the API request.

        Yields:
            str: Text generated by the Groq API in response to the messages.
        """
        try:
            completion = self.client.chat.completions.create(
                messages=messages,
                model=model,
                **kwargs
            )
            for message in completion.choices:
                content = message.message.content
                if content is not None:
                    yield content
        except Exception as e:
            if self.verbose:
                import traceback
                traceback.print_exc()
            else:
                print(f"An error occurred while getting completions from Groq API: {e}")
            raise RuntimeError(f"An error occurred while getting completions from Groq API: {e}")

# Example of using the GroqClient
if __name__ == "__main__":
    groq_client = GroqClient(verbose=True)
    messages = [
        {"role": "user", "content": "Explain the importance of fast language models"}
    ]
    for response in groq_client.stream_completion(messages):
        print(response)
