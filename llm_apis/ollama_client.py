import requests
import json
import os
import re
from config_loader import config


class OllamaClient:
    """Client for interacting with the Ollama API for streaming text completions."""
    def __init__(self, base_url="http://localhost:11434", api_key=None, verbose=False):
        """
        Initialize the OllamaStreamingClient with the API base URL and optionally an API key.

        Args:
            base_url (str): Base URL of the Ollama API.
            api_key (str, optional): API key if required for the API.
            verbose (bool): Whether to print verbose output.
        """
        self.base_url = base_url
        self.api_key = api_key if api_key else os.getenv('OLLAMA_API_KEY')
        self.verbose = verbose

    def stream_completion(self, messages, model, **kwargs):
        """
        Stream text completions from the Ollama API.

        Args:
            messages (list): List of messages used as context or prompt.
            model (str): Model identifier for text generation.
            **kwargs: Additional keyword arguments for the API request.

        Yields:
            str: Text generated by the Ollama API in response to the messages.
        """
        url = f"{self.base_url}/api/chat"
        data = {
            "model": model,
            "messages": messages,
            "stream": True,
            "keep_alive": self.__fix_keep_alive(config.OLLAMA_KEEP_ALIVE),
            **kwargs

        }
        json_data = json.dumps(data)
        headers = {'Authorization': f'Bearer {self.api_key}'} if self.api_key else {}
        try:
            with requests.post(url, data=json_data, stream=True, headers=headers) as response:
                if response.status_code == 200:
                    for chunk in response.iter_content(chunk_size=None):
                        if chunk:
                            # Parse the JSON response and extract the content
                            response_data = json.loads(chunk)
                            yield response_data['message']['content']
                else:
                    if self.verbose:
                        print(f"Request failed with status code {response.status_code}")
                    raise RuntimeError(f"Request failed with status code {response.status_code}")
        except Exception as e:
            if self.verbose:
                import traceback
                traceback.print_exc()
            else:
                print(f"An error occurred streaming completion from Ollama API: {e}")
            raise RuntimeError(f"An error occurred streaming completion from Ollama API: {e}")

    def __fix_keep_alive(self, keep_alive):
        """ Attempts to fix the keep_alive value if it is not a valid string. Returns -1 as a fallback. """
        try:
            return int(keep_alive)
        except ValueError:
            pattern = r"^-?\d+[smh]$"
            if re.match(pattern, keep_alive) is not None:
                return keep_alive
            print(f"Invalid OLLAMA_KEEP_ALIVE value: {keep_alive}. Must be a number followed by s, m, or h.")
            return -1
